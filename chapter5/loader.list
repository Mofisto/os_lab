     1                                     %include "boot.inc"
     2                              <1> ;-------------	 loader和kernel   ----------
     3                              <1> 
     4                              <1> LOADER_BASE_ADDR equ 0x900
     5                              <1> LOADER_STACK_TOP equ LOADER_BASE_ADDR 
     6                              <1> LOADER_START_SECTOR equ 0x2
     7                              <1> 
     8                              <1> 
     9                              <1> 
    10                              <1> KERNEL_BIN_BASE_ADDR equ 0x70000
    11                              <1> KERNEL_START_SECTOR equ 0x9
    12                              <1> KERNEL_ENTRY_POINT equ 0xc0001500
    13                              <1> 
    14                              <1> ;-------------   页表配置   ----------------
    15                              <1> PAGE_DIR_TABLE_POS equ 0x100000
    16                              <1> 
    17                              <1> ;--------------   gdt描述符属性  -------------
    18                              <1> ;------只是为了方便构建段描述符而定义的符号-------
    19                              <1> DESC_G_4K   equ	  1_000_0000_0000_0000_0000_0000b ;G位为1时，段界限以4KB为单位
    20                              <1> DESC_D_32   equ	   1_00_0000_0000_0000_0000_0000b ;D位为1，默认偏移地址或操作数大写
    21                              <1> DESC_L	    equ	    0_0_0000_0000_0000_0000_0000b ;64位代码标记，此处标记为0便可。
    22                              <1> DESC_AVL    equ	      0_0000_0000_0000_0000_0000b ;CPU不用此位，暂置为0  
    23                              <1> DESC_LIMIT_CODE2  equ   1111_0000_0000_0000_0000b
    24                              <1> DESC_LIMIT_DATA2  equ   DESC_LIMIT_CODE2
    25                              <1> DESC_LIMIT_VIDEO2  equ   0000_000_0000_0000_0000b ;
    26                              <1> DESC_P	    equ		        1_000_0000_0000_0000b ;P位为1，段存在
    27                              <1> DESC_DPL_0  equ		   		 00_0_0000_0000_0000b ;DPL为0，段的特权级为 0
    28                              <1> DESC_DPL_1  equ		         01_0_0000_0000_0000b ;DPL为1，段的特权级为 1
    29                              <1> DESC_DPL_2  equ		         10_0_0000_0000_0000b ;DPL为2，段的特权级为 2
    30                              <1> DESC_DPL_3  equ		         11_0_0000_0000_0000b ;DPL为3，段的特权级为 3
    31                              <1> DESC_S_CODE equ		            1_0000_0000_0000b ;S 位为1，代码段或者数据段
    32                              <1> DESC_S_DATA equ	                DESC_S_CODE
    33                              <1> DESC_S_sys  equ		            0_0000_0000_0000b ;S 位为0，系统段
    34                              <1> DESC_TYPE_CODE  equ	      		  1000_0000_0000b	;x=1,c=0,r=0,a=0 代码段是可执行的,非依从的,不可读的,已访问位a清0.  
    35                              <1> DESC_TYPE_DATA  equ	              0010_0000_0000b	;x=0,e=0,w=1,a=0 数据段是不可执行的,向上扩展的,可读的，可写的,已访问位a清0.
    36                              <1> 
    37                              <1> 
    38                              <1> ;----构建 代码段、数据段、显存段的的描述符高4个字节----
    39                              <1> DESC_CODE_HIGH4 equ (0x00 << 24) + DESC_G_4K + DESC_D_32 + DESC_L + DESC_AVL + DESC_LIMIT_CODE2 + DESC_P + DESC_DPL_0 + DESC_S_CODE + DESC_TYPE_CODE + 0x00
    40                              <1> DESC_DATA_HIGH4 equ (0x00 << 24) + DESC_G_4K + DESC_D_32 + DESC_L + DESC_AVL + DESC_LIMIT_DATA2 + DESC_P + DESC_DPL_0 + DESC_S_DATA + DESC_TYPE_DATA + 0x00
    41                              <1> DESC_VIDEO_HIGH4 equ (0x00 << 24) + DESC_G_4K + DESC_D_32 + DESC_L + DESC_AVL + DESC_LIMIT_VIDEO2 + DESC_P + DESC_DPL_0 + DESC_S_DATA + DESC_TYPE_DATA + 0x0b
    42                              <1> ;因为显存的起始地址是 0xb8000 ，所以显存段描述符的高4个字节最低8位，应该是 0x0b
    43                              <1> 
    44                              <1> ;--------------   选择子属性  ---------------
    45                              <1> RPL0  equ   00b
    46                              <1> RPL1  equ   01b
    47                              <1> RPL2  equ   10b
    48                              <1> RPL3  equ   11b
    49                              <1> TI_GDT	 equ   000b  ;TI位指示使用 GDT 还是 LDT 
    50                              <1> TI_LDT	 equ   100b  ;TI位
    51                              <1> 
    52                              <1> 
    53                              <1> ;----------------   页表相关属性    --------------
    54                              <1> PG_P  equ       1b
    55                              <1> PG_RW_R	 equ   00b 
    56                              <1> PG_RW_W	 equ   10b 
    57                              <1> PG_US_S	 equ  000b 
    58                              <1> PG_US_U	 equ  100b 
    59                              <1> 
    60                              <1> 
    61                              <1> ;-------------  program type 定义   --------------
    62                              <1> PT_NULL equ 0
     2                                     section loader vstart=LOADER_BASE_ADDR
     3                                  ;构建gdt及其内部的描述符
     4 00000000 00000000                   GDT_BASE:   dd    0x00000000 
     5 00000004 00000000                	            dd    0x00000000
     6                                  
     7 00000008 FFFF0000                   CODE_DESC:  dd    0x0000FFFF 
     8 0000000C 0098CF00                	            dd    DESC_CODE_HIGH4
     9                                  
    10 00000010 FFFF0000                   DATA_STACK_DESC:  dd    0x0000FFFF
    11 00000014 0092CF00                		               dd    DESC_DATA_HIGH4
    12                                  
    13 00000018 07000080                   VIDEO_DESC: dd    0x80000007	       ; limit=(0xbffff-0xb8000)/4k=0x7
    14 0000001C 0B92C000                	            dd    DESC_VIDEO_HIGH4  ; 此时dpl为0
    15                                  
    16                                     GDT_SIZE   equ   $ - GDT_BASE
    17                                     GDT_LIMIT   equ   GDT_SIZE -	1 
    18 00000020 0000000000000000-          times 60 dq 0					 ; 此处预留60个描述符的空位(slot)
    18 00000020 <rep 3Ch>          
    19                                     SELECTOR_CODE equ (0x0001<<3) + TI_GDT + RPL0         ; 相当于(CODE_DESC - GDT_BASE)/8 + TI_GDT + RPL0
    20                                     SELECTOR_DATA equ (0x0002<<3) + TI_GDT + RPL0	 ; 同上
    21                                     SELECTOR_VIDEO equ (0x0003<<3) + TI_GDT + RPL0	 ; 同上 
    22                                  
    23                                     ; total_mem_bytes用于保存内存容量,以字节为单位,此位置比较好记。
    24                                     ; 当前偏移loader.bin文件头0x200字节,loader.bin的加载地址是0x900,
    25                                     ; 故total_mem_bytes内存中的地址是0xb00.将来在内核中咱们会引用此地址
    26 00000200 00000000                   total_mem_bytes dd 0					 
    27                                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    28                                  
    29                                     ;以下是定义gdt的指针，前2字节是gdt界限，后4字节是gdt起始地址
    30 00000204 1F00                       gdt_ptr  dw  GDT_LIMIT 
    31 00000206 [00000000]              	         dd  GDT_BASE
    32                                  
    33                                     ;人工对齐:total_mem_bytes4字节+gdt_ptr6字节+ards_buf244字节+ards_nr2,共256字节
    34 0000020A 00<rep F4h>                ards_buf times 244 db 0
    35 000002FE 0000                       ards_nr dw 0		      ;用于记录ards结构体数量
    36                                  
    37                                     loader_start:
    38                                     
    39                                  ;-------  int 15h eax = 0000E820h ,edx = 534D4150h ('SMAP') 获取内存布局  -------
    40                                  
    41 00000300 6631DB                     xor ebx, ebx		      ;第一次调用时，ebx值要为0
    42 00000303 66BA50414D53               mov edx, 0x534d4150	      ;edx只赋值一次，循环体中不会改变
    43 00000309 BF[0A02]                   mov di, ards_buf	      ;ards结构缓冲区
    44                                  .e820_mem_get_loop:	      ;循环获取每个ARDS内存范围描述结构
    45 0000030C 66B820E80000               mov eax, 0x0000e820	      ;执行int 0x15后,eax值变为0x534d4150,所以每次执行int前都要更新为子功能号。
    46 00000312 66B914000000               mov ecx, 20		      ;ARDS地址范围描述符结构大小是20字节
    47 00000318 CD15                       int 0x15
    48 0000031A 7232                       jc .e820_failed_so_try_e801   ;若cf位为1则有错误发生，尝试0xe801子功能
    49 0000031C 01CF                       add di, cx		      ;使di增加20字节指向缓冲区中新的ARDS结构位置
    50 0000031E FF06[FE02]                 inc word [ards_nr]	      ;记录ARDS数量
    51 00000322 6683FB00                   cmp ebx, 0		      ;若ebx为0且cf不为1,这说明ards全部返回，当前已是最后一个
    52 00000326 75E4                       jnz .e820_mem_get_loop
    53                                  
    54                                  ;在所有ards结构中，找出(base_add_low + length_low)的最大值，即内存的容量。
    55 00000328 8B0E[FE02]                 mov cx, [ards_nr]	      ;遍历每一个ARDS结构体,循环次数是ARDS的数量
    56 0000032C 66BB[0A020000]             mov ebx, ards_buf 
    57 00000332 6631D2                     xor edx, edx		      ;edx为最大的内存容量,在此先清0
    58                                  .find_max_mem_area:	      ;无须判断type是否为1,最大的内存块一定是可被使用
    59 00000335 66678B03                   mov eax, [ebx]	      ;base_add_low
    60 00000339 6667034308                 add eax, [ebx+8]	      ;length_low
    61 0000033E 6683C314                   add ebx, 20		      ;指向缓冲区中下一个ARDS结构
    62 00000342 6639C2                     cmp edx, eax		      ;冒泡排序，找出最大,edx寄存器始终是最大的内存容量
    63 00000345 7D03                       jge .next_ards
    64 00000347 6689C2                     mov edx, eax		      ;edx为总内存大小
    65                                  .next_ards:
    66 0000034A E2E9                       loop .find_max_mem_area
    67 0000034C EB58                       jmp .mem_get_ok
    68                                  
    69                                  ;------  int 15h ax = E801h 获取内存大小,最大支持4G  ------
    70                                  ; 返回后, ax cx 值一样,以KB为单位,bx dx值一样,以64KB为单位
    71                                  ; 在ax和cx寄存器中为低16M,在bx和dx寄存器中为16MB到4G。
    72                                  .e820_failed_so_try_e801:
    73 0000034E B801E8                     mov ax,0xe801
    74 00000351 CD15                       int 0x15
    75 00000353 7232                       jc .e801_failed_so_try88   ;若当前e801方法失败,就尝试0x88方法
    76                                  
    77                                  ;1 先算出低15M的内存,ax和cx中是以KB为单位的内存数量,将其转换为以byte为单位
    78 00000355 B90004                     mov cx,0x400	     ;cx和ax值一样,cx用做乘数
    79 00000358 F7E1                       mul cx 
    80 0000035A 66C1E210                   shl edx,16
    81 0000035E 6625FFFF0000               and eax,0x0000FFFF
    82 00000364 6609C2                     or edx,eax
    83 00000367 6681C200001000             add edx, 0x100000 ;ax只是15MB,故要加1MB
    84 0000036E 6689D6                     mov esi,edx	     ;先把低15MB的内存容量存入esi寄存器备份
    85                                  
    86                                  ;2 再将16MB以上的内存转换为byte为单位,寄存器bx和dx中是以64KB为单位的内存数量
    87 00000371 6631C0                     xor eax,eax
    88 00000374 89D8                       mov ax,bx		
    89 00000376 66B900000100               mov ecx, 0x10000	;0x10000十进制为64KB
    90 0000037C 66F7E1                     mul ecx		;32位乘法,默认的被乘数是eax,积为64位,高32位存入edx,低32位存入eax.
    91 0000037F 6601C6                     add esi,eax		;由于此方法只能测出4G以内的内存,故32位eax足够了,edx肯定为0,只加eax便可
    92 00000382 6689F2                     mov edx,esi		;edx为总内存大小
    93 00000385 EB1F                       jmp .mem_get_ok
    94                                  
    95                                  ;-----------------  int 15h ah = 0x88 获取内存大小,只能获取64M之内  ----------
    96                                  .e801_failed_so_try88: 
    97                                     ;int 15后，ax存入的是以kb为单位的内存容量
    98 00000387 B488                       mov  ah, 0x88
    99 00000389 CD15                       int  0x15
   100 0000038B 723B                       jc .error_hlt
   101 0000038D 6625FFFF0000               and eax,0x0000FFFF
   102                                        
   103                                     ;16位乘法，被乘数是ax,积为32位.积的高16位在dx中，积的低16位在ax中
   104 00000393 B90004                     mov cx, 0x400     ;0x400等于1024,将ax中的内存容量换为以byte为单位
   105 00000396 F7E1                       mul cx
   106 00000398 66C1E210                   shl edx, 16	     ;把dx移到高16位
   107 0000039C 6609C2                     or edx, eax	     ;把积的低16位组合到edx,为32位的积
   108 0000039F 6681C200001000             add edx,0x100000  ;0x88子功能只会返回1MB以上的内存,故实际内存大小要加上1MB
   109                                  
   110                                  .mem_get_ok:
   111 000003A6 668916[0002]               mov [total_mem_bytes], edx	 ;将内存换为byte单位后存入total_mem_bytes处。
   112                                  
   113                                  
   114                                  ;-----------------   准备进入保护模式   -------------------
   115                                  ;1 打开A20
   116                                  ;2 加载gdt
   117                                  ;3 将cr0的pe位置1
   118                                  
   119                                     ;-----------------  打开A20  ----------------
   120 000003AB E492                       in al,0x92
   121 000003AD 0C02                       or al,0000_0010B
   122 000003AF E692                       out 0x92,al
   123                                  
   124                                     ;-----------------  加载GDT  ----------------
   125 000003B1 0F0116[0402]               lgdt [gdt_ptr]
   126                                  
   127                                     ;-----------------  cr0第0位置1  ----------------
   128 000003B6 0F20C0                     mov eax, cr0
   129 000003B9 6683C801                   or eax, 0x00000001
   130 000003BD 0F22C0                     mov cr0, eax
   131                                  
   132 000003C0 66EA[C9030000]0800         jmp dword SELECTOR_CODE:p_mode_start	     ; 刷新流水线，避免分支预测的影响,这种cpu优化策略，最怕jmp跳转，
   133                                  					     ; 这将导致之前做的预测失效，从而起到了刷新的作用。
   134                                  .error_hlt:		      ;出错则挂起
   135 000003C8 F4                         hlt
   136                                  
   137                                  [bits 32]
   138                                  p_mode_start:
   139 000003C9 66B81000                   mov ax, SELECTOR_DATA
   140 000003CD 8ED8                       mov ds, ax
   141 000003CF 8EC0                       mov es, ax
   142 000003D1 8ED0                       mov ss, ax
   143 000003D3 BC00090000                 mov esp,LOADER_STACK_TOP
   144 000003D8 66B81800                   mov ax, SELECTOR_VIDEO
   145 000003DC 8EE8                       mov gs, ax
   146                                  
   147                                  ; -------------------------   加载kernel  ----------------------
   148 000003DE B809000000                 mov eax, KERNEL_START_SECTOR        ; kernel.bin所在的扇区号
   149 000003E3 BB00000700                 mov ebx, KERNEL_BIN_BASE_ADDR       ; 从磁盘读出后，写入到ebx指定的地址
   150 000003E8 B9C8000000                 mov ecx, 200			       ; 读入的扇区数
   151                                  
   152 000003ED E829010000                 call rd_disk_m_32
   153                                  
   154                                     ; 创建页目录及页表并初始化页内存位图
   155 000003F2 E8AA000000                 call setup_page
   156                                  
   157                                     ;要将描述符表地址及偏移量写入内存gdt_ptr,一会用新地址重新加载
   158 000003F7 0F0105[04020000]           sgdt [gdt_ptr]	      ; 存储到原来gdt所有的位置
   159                                  
   160                                     ;将gdt描述符中视频段描述符中的段基址+0xc0000000
   161 000003FE 8B1D[06020000]             mov ebx, [gdt_ptr + 2]  
   162 00000404 814B1C000000C0             or dword [ebx + 0x18 + 4], 0xc0000000      ;视频段是第3个段描述符,每个描述符是8字节,故0x18。
   163                                  					      ;段描述符的高4字节的最高位是段基址的31~24位
   164                                  
   165                                     ;将gdt的基址加上0xc0000000使其成为内核所在的高地址
   166 0000040B 8105[06020000]0000-        add dword [gdt_ptr + 2], 0xc0000000
   166 00000413 00C0               
   167                                  
   168 00000415 81C4000000C0               add esp, 0xc0000000        ; 将栈指针同样映射到内核地址
   169                                  
   170                                     ; 把页目录地址赋给cr3
   171 0000041B B800001000                 mov eax, PAGE_DIR_TABLE_POS
   172 00000420 0F22D8                     mov cr3, eax
   173                                  
   174                                     ; 打开cr0的pg位(第31位)
   175 00000423 0F20C0                     mov eax, cr0
   176 00000426 0D00000080                 or eax, 0x80000000
   177 0000042B 0F22C0                     mov cr0, eax
   178                                  
   179                                     ;在开启分页后,用gdt新的地址重新加载
   180 0000042E 0F0115[04020000]           lgdt [gdt_ptr]             ; 重新加载
   181                                  
   182                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;  此时不刷新流水线也没问题  ;;;;;;;;;;;;;;;;;;;;;;;;
   183                                  ;由于一直处在32位下,原则上不需要强制刷新,经过实际测试没有以下这两句也没问题.
   184                                  ;但以防万一，还是加上啦，免得将来出来莫句奇妙的问题.
   185 00000435 EA[3C040000]0800           jmp SELECTOR_CODE:enter_kernel	  ;强制刷新流水线,更新gdt
   186                                  enter_kernel:    
   187                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   188 0000043C E80A000000                 call kernel_init
   189 00000441 BC00F009C0                 mov esp, 0xc009f000
   190 00000446 E9(001500C0)               jmp KERNEL_ENTRY_POINT                 ; 用地址0x1500访问测试，结果ok
   191                                  
   192                                  
   193                                  ;-----------------   将kernel.bin中的segment拷贝到编译的地址   -----------
   194                                  kernel_init:
   195 0000044B 31C0                       xor eax, eax
   196 0000044D 31DB                       xor ebx, ebx		;ebx记录程序头表地址
   197 0000044F 31C9                       xor ecx, ecx		;cx记录程序头表中的program header数量
   198 00000451 31D2                       xor edx, edx		;dx 记录program header尺寸,即e_phentsize
   199                                  
   200 00000453 668B152A000700             mov dx, [KERNEL_BIN_BASE_ADDR + 42]	  ; 偏移文件42字节处的属性是e_phentsize,表示program header大小
   201 0000045A 8B1D1C000700               mov ebx, [KERNEL_BIN_BASE_ADDR + 28]   ; 偏移文件开始部分28字节的地方是e_phoff,表示第1 个program header在文件中的偏移量
   202                                  					  ; 其实该值是0x34,不过还是谨慎一点，这里来读取实际值
   203 00000460 81C300000700               add ebx, KERNEL_BIN_BASE_ADDR
   204 00000466 668B0D2C000700             mov cx, [KERNEL_BIN_BASE_ADDR + 44]    ; 偏移文件开始部分44字节的地方是e_phnum,表示有几个program header
   205                                  .each_segment:
   206 0000046D 803B00                     cmp byte [ebx + 0], PT_NULL		  ; 若p_type等于 PT_NULL,说明此program header未使用。
   207 00000470 7417                       je .PTNULL
   208                                  
   209                                     ;为函数memcpy压入参数,参数是从右往左依然压入.函数原型类似于 memcpy(dst,src,size)
   210 00000472 FF7310                     push dword [ebx + 16]		  ; program header中偏移16字节的地方是p_filesz,压入函数memcpy的第三个参数:size
   211 00000475 8B4304                     mov eax, [ebx + 4]			  ; 距程序头偏移量为4字节的位置是p_offset
   212 00000478 0500000700                 add eax, KERNEL_BIN_BASE_ADDR	  ; 加上kernel.bin被加载到的物理地址,eax为该段的物理地址
   213 0000047D 50                         push eax				  ; 压入函数memcpy的第二个参数:源地址
   214 0000047E FF7308                     push dword [ebx + 8]			  ; 压入函数memcpy的第一个参数:目的地址,偏移程序头8字节的位置是p_vaddr，这就是目的地址
   215 00000481 E808000000                 call mem_cpy				  ; 调用mem_cpy完成段复制
   216 00000486 83C40C                     add esp,12				  ; 清理栈中压入的三个参数
   217                                  .PTNULL:
   218 00000489 01D3                       add ebx, edx				  ; edx为program header大小,即e_phentsize,在此ebx指向下一个program header 
   219 0000048B E2E0                       loop .each_segment
   220 0000048D C3                         ret
   221                                  
   222                                  ;----------  逐字节拷贝 mem_cpy(dst,src,size) ------------
   223                                  ;输入:栈中三个参数(dst,src,size)
   224                                  ;输出:无
   225                                  ;---------------------------------------------------------
   226                                  mem_cpy:		      
   227 0000048E FC                         cld
   228 0000048F 55                         push ebp
   229 00000490 89E5                       mov ebp, esp
   230 00000492 51                         push ecx		   ; rep指令用到了ecx，但ecx对于外层段的循环还有用，故先入栈备份
   231 00000493 8B7D08                     mov edi, [ebp + 8]	   ; dst
   232 00000496 8B750C                     mov esi, [ebp + 12]	   ; src
   233 00000499 8B4D10                     mov ecx, [ebp + 16]	   ; size
   234 0000049C F3A4                       rep movsb		   ; 逐字节拷贝
   235                                  
   236                                     ;恢复环境
   237 0000049E 59                         pop ecx		
   238 0000049F 5D                         pop ebp
   239 000004A0 C3                         ret
   240                                  
   241                                  
   242                                  ;-------------   创建页目录及页表   ---------------
   243                                  setup_page:
   244                                  ;先把页目录占用的空间逐字节清0
   245 000004A1 B900100000                 mov ecx, 4096
   246 000004A6 BE00000000                 mov esi, 0
   247                                  .clear_page_dir:
   248 000004AB C6860000100000             mov byte [PAGE_DIR_TABLE_POS + esi], 0
   249 000004B2 46                         inc esi
   250 000004B3 E2F6                       loop .clear_page_dir
   251                                  
   252                                  ;开始创建页目录项(PDE)
   253                                  .create_pde:				     ; 创建Page Directory Entry
   254 000004B5 B800001000                 mov eax, PAGE_DIR_TABLE_POS
   255 000004BA 0500100000                 add eax, 0x1000 			     ; 此时eax为第一个页表的位置及属性
   256 000004BF 89C3                       mov ebx, eax				     ; 此处为ebx赋值，是为.create_pte做准备，ebx为基址。
   257                                  
   258                                  ;   下面将页目录项0和0xc00都存为第一个页表的地址，
   259                                  ;   一个页表可表示4MB内存,这样0xc03fffff以下的地址和0x003fffff以下的地址都指向相同的页表，
   260                                  ;   这是为将地址映射为内核地址做准备
   261 000004C1 83C807                     or eax, PG_US_U | PG_RW_W | PG_P	     ; 页目录项的属性RW和P位为1,US为1,表示用户属性,所有特权级别都可以访问.
   262 000004C4 A300001000                 mov [PAGE_DIR_TABLE_POS + 0x0], eax       ; 第1个目录项,在页目录表中的第1个目录项写入第一个页表的位置(0x101000)及属性(3)
   263 000004C9 A3000C1000                 mov [PAGE_DIR_TABLE_POS + 0xc00], eax     ; 一个页表项占用4字节,0xc00表示第768个页表占用的目录项,0xc00以上的目录项用于内核空间,
   264                                  					     ; 也就是页表的0xc0000000~0xffffffff共计1G属于内核,0x0~0xbfffffff共计3G属于用户进程.
   265 000004CE 2D00100000                 sub eax, 0x1000
   266 000004D3 A3FC0F1000                 mov [PAGE_DIR_TABLE_POS + 4092], eax	     ; 使最后一个目录项指向页目录表自己的地址
   267                                  
   268                                  ;下面创建页表项(PTE)
   269 000004D8 B900010000                 mov ecx, 256				     ; 1M低端内存 / 每页大小4k = 256
   270 000004DD BE00000000                 mov esi, 0
   271 000004E2 BA07000000                 mov edx, PG_US_U | PG_RW_W | PG_P	     ; 属性为7,US=1,RW=1,P=1
   272                                  .create_pte:				     ; 创建Page Table Entry
   273 000004E7 8914B3                     mov [ebx+esi*4],edx			     ; 此时的ebx已经在上面通过eax赋值为0x101000,也就是第一个页表的地址 
   274 000004EA 81C200100000               add edx,4096
   275 000004F0 46                         inc esi
   276 000004F1 E2F4                       loop .create_pte
   277                                  
   278                                  ;创建内核其它页表的PDE
   279 000004F3 B800001000                 mov eax, PAGE_DIR_TABLE_POS
   280 000004F8 0500200000                 add eax, 0x2000 		     ; 此时eax为第二个页表的位置
   281 000004FD 83C807                     or eax, PG_US_U | PG_RW_W | PG_P  ; 页目录项的属性RW和P位为1,US为0
   282 00000500 BB00001000                 mov ebx, PAGE_DIR_TABLE_POS
   283 00000505 B9FE000000                 mov ecx, 254			     ; 范围为第769~1022的所有目录项数量
   284 0000050A BE01030000                 mov esi, 769
   285                                  .create_kernel_pde:
   286 0000050F 8904B3                     mov [ebx+esi*4], eax
   287 00000512 46                         inc esi
   288 00000513 0500100000                 add eax, 0x1000
   289 00000518 E2F5                       loop .create_kernel_pde
   290 0000051A C3                         ret
   291                                  
   292                                  
   293                                  ;-------------------------------------------------------------------------------
   294                                  			   ;功能:读取硬盘n个扇区
   295                                  rd_disk_m_32:	   
   296                                  ;-------------------------------------------------------------------------------
   297                                  							 ; eax=LBA扇区号
   298                                  							 ; ebx=将数据写入的内存地址
   299                                  							 ; ecx=读入的扇区数
   300 0000051B 89C6                          mov esi,eax	   ; 备份eax
   301 0000051D 6689CF                        mov di,cx		   ; 备份扇区数到di
   302                                  ;读写硬盘:
   303                                  ;第1步：设置要读取的扇区数
   304 00000520 66BAF201                      mov dx,0x1f2
   305 00000524 88C8                          mov al,cl
   306 00000526 EE                            out dx,al            ;读取的扇区数
   307                                  
   308 00000527 89F0                          mov eax,esi	   ;恢复ax
   309                                  
   310                                  ;第2步：将LBA地址存入0x1f3 ~ 0x1f6
   311                                  
   312                                        ;LBA地址7~0位写入端口0x1f3
   313 00000529 66BAF301                      mov dx,0x1f3                       
   314 0000052D EE                            out dx,al                          
   315                                  
   316                                        ;LBA地址15~8位写入端口0x1f4
   317 0000052E B108                          mov cl,8
   318 00000530 D3E8                          shr eax,cl
   319 00000532 66BAF401                      mov dx,0x1f4
   320 00000536 EE                            out dx,al
   321                                  
   322                                        ;LBA地址23~16位写入端口0x1f5
   323 00000537 D3E8                          shr eax,cl
   324 00000539 66BAF501                      mov dx,0x1f5
   325 0000053D EE                            out dx,al
   326                                  
   327 0000053E D3E8                          shr eax,cl
   328 00000540 240F                          and al,0x0f	   ;lba第24~27位
   329 00000542 0CE0                          or al,0xe0	   ; 设置7～4位为1110,表示lba模式
   330 00000544 66BAF601                      mov dx,0x1f6
   331 00000548 EE                            out dx,al
   332                                  
   333                                  ;第3步：向0x1f7端口写入读命令，0x20 
   334 00000549 66BAF701                      mov dx,0x1f7
   335 0000054D B020                          mov al,0x20                        
   336 0000054F EE                            out dx,al
   337                                  
   338                                  ;;;;;;; 至此,硬盘控制器便从指定的lba地址(eax)处,读出连续的cx个扇区,下面检查硬盘状态,不忙就能把这cx个扇区的数据读出来
   339                                  
   340                                  ;第4步：检测硬盘状态
   341                                    .not_ready:		   ;测试0x1f7端口(status寄存器)的的BSY位
   342                                        ;同一端口,写时表示写入命令字,读时表示读入硬盘状态
   343 00000550 90                            nop
   344 00000551 EC                            in al,dx
   345 00000552 2488                          and al,0x88	   ;第4位为1表示硬盘控制器已准备好数据传输,第7位为1表示硬盘忙
   346 00000554 3C08                          cmp al,0x08
   347 00000556 75F8                          jnz .not_ready	   ;若未准备好,继续等。
   348                                  
   349                                  ;第5步：从0x1f0端口读数据
   350 00000558 6689F8                        mov ax, di	   ;以下从硬盘端口读数据用insw指令更快捷,不过尽可能多的演示命令使用,
   351                                  			   ;在此先用这种方法,在后面内容会用到insw和outsw等
   352                                  
   353 0000055B 66BA0001                      mov dx, 256	   ;di为要读取的扇区数,一个扇区有512字节,每次读入一个字,共需di*512/2次,所以di*256
   354 0000055F 66F7E2                        mul dx
   355 00000562 6689C1                        mov cx, ax	   
   356 00000565 66BAF001                      mov dx, 0x1f0
   357                                    .go_on_read:
   358 00000569 66ED                          in ax,dx		
   359 0000056B 668903                        mov [ebx], ax
   360 0000056E 83C302                        add ebx, 2
   361                                  			  ; 由于在实模式下偏移地址为16位,所以用bx只会访问到0~FFFFh的偏移。
   362                                  			  ; loader的栈指针为0x900,bx为指向的数据输出缓冲区,且为16位，
   363                                  			  ; 超过0xffff后,bx部分会从0开始,所以当要读取的扇区数过大,待写入的地址超过bx的范围时，
   364                                  			  ; 从硬盘上读出的数据会把0x0000~0xffff的覆盖，
   365                                  			  ; 造成栈被破坏,所以ret返回时,返回地址被破坏了,已经不是之前正确的地址,
   366                                  			  ; 故程序出会错,不知道会跑到哪里去。
   367                                  			  ; 所以改为ebx代替bx指向缓冲区,这样生成的机器码前面会有0x66和0x67来反转。
   368                                  			  ; 0X66用于反转默认的操作数大小! 0X67用于反转默认的寻址方式.
   369                                  			  ; cpu处于16位模式时,会理所当然的认为操作数和寻址都是16位,处于32位模式时,
   370                                  			  ; 也会认为要执行的指令是32位.
   371                                  			  ; 当我们在其中任意模式下用了另外模式的寻址方式或操作数大小(姑且认为16位模式用16位字节操作数，
   372                                  			  ; 32位模式下用32字节的操作数)时,编译器会在指令前帮我们加上0x66或0x67，
   373                                  			  ; 临时改变当前cpu模式到另外的模式下.
   374                                  			  ; 假设当前运行在16位模式,遇到0X66时,操作数大小变为32位.
   375                                  			  ; 假设当前运行在32位模式,遇到0X66时,操作数大小变为16位.
   376                                  			  ; 假设当前运行在16位模式,遇到0X67时,寻址方式变为32位寻址
   377                                  			  ; 假设当前运行在32位模式,遇到0X67时,寻址方式变为16位寻址.
   378                                  
   379 00000571 E2F6                          loop .go_on_read
   380 00000573 C3                            ret
